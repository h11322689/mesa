   CopyRight = '''
   /**************************************************************************
   *
   * Copyright 2010 VMware, Inc.
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a
   * copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sub license, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice (including the
   * next paragraph) shall be included in all copies or substantial portions
   * of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
   * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
   * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
   * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
   * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   *
   **************************************************************************/
      /**
   * @file
   * SRGB translation.
   *
   * @author Brian Paul <brianp@vmware.com>
   * @author Michal Krol <michal@vmware.com>
   * @author Jose Fonseca <jfonseca@vmware.com>
   */
   '''
         import math
   import struct
         def srgb_to_linear(x):
      if x <= 0.04045:
         else:
            def linear_to_srgb(x):
      if x >= 0.0031308:
         else:
            def generate_srgb_tables():
      print('const float')
   print('util_format_srgb_8unorm_to_linear_float_table[256] = {')
   for j in range(0, 256, 4):
      print('   ', end=' ')
      print('};')
   print()
   print('const uint8_t')
   print('util_format_srgb_to_linear_8unorm_table[256] = {')
   for j in range(0, 256, 16):
      print('   ', end=' ')
      print('};')
   print()
   print('const uint8_t')
   print('util_format_linear_to_srgb_8unorm_table[256] = {')
   for j in range(0, 256, 16):
      print('   ', end=' ')
      print('};')
         # calculate the table interpolation values used in float linear to unorm8 srgb
      numexp = 13
      # stepshift is just used to only use every x-th float to make things faster,
   # 5 is largest value which still gives exact same table as 0
      stepshift = 5
   nbuckets = numexp << mantissa_msb
   bucketsize = (1 << (23 - mantissa_msb)) >> stepshift
   mantshift = 12
   valtable = []
   sum_aa = float(bucketsize)
   sum_ab = 0.0
   sum_bb = 0.0
   for i in range(0, bucketsize):
      j = (i << stepshift) >> mantshift
   sum_ab += j
               for bucket in range(0, nbuckets):
      start = ((127 - numexp) << 23) + bucket*(bucketsize << stepshift)
   sum_a = 0.0
            for i in range(0, bucketsize):
         j = (i << stepshift) >> mantshift
   fint = start + (i << stepshift)
   ffloat = struct.unpack('f', struct.pack('I', fint))[0]
   val = linear_to_srgb(ffloat) * 255.0 + 0.5
            solved_a = inv_det * (sum_bb*sum_a - sum_ab*sum_b)
            scaled_a = solved_a * 65536.0 / 512.0
            int_a = int(scaled_a + 0.5)
                  print('const unsigned')
            for j in range(0, nbuckets, 4):
      print('   ', end=' ')
      print('};')
         def main():
      print('/* This file is autogenerated by u_format_srgb.py. Do not edit directly. */')
   print()
   # This will print the copyright message on the top of this file
   print(CopyRight.strip())
   print()
   print('#include "format_srgb.h"')
   print()
            if __name__ == '__main__':
      main()
