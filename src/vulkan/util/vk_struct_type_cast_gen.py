   # Copyright © 2023 Igalia S.L.
   # SPDX-License-Identifier: MIT
      """Create shortcuts for casting Vulkan structs when knowing their stype."""
      import argparse
   import functools
   import os
   import re
   import textwrap
   import xml.etree.ElementTree as et
      from mako.template import Template
   from vk_extensions import Extension, filter_api, get_all_required
      COPYRIGHT = textwrap.dedent(u"""\
      * Copyright © 2023 Igalia S.L.
   * SPDX-License-Identifier: MIT
         H_TEMPLATE = Template(textwrap.dedent(u"""\
      /* Autogenerated file -- do not edit
   * generated by ${file}
   *
   ${copyright}
            #ifndef MESA_VK_STRUCT_CASTS_H
                     #ifdef __cplusplus
   extern "C" {
            % for s in structs:
   #define ${s.stype}_cast ${s.name}
            #ifdef __cplusplus
   } /* extern "C" */
                     class VkStruct(object):
      """Simple struct-like class representing a single Vulkan struct identified with a VkStructureType"""
   def __init__(self, name, stype):
      self.name = name
         def struct_get_stype(xml_node):
      for member in xml_node.findall('./member'):
      name = member.findall('./name')
   if len(name) > 0 and name[0].text == "sType":
               def parse_xml(filename, structs, beta):
      xml = et.parse(filename)
                     for struct_type in xml.findall('./types/type[@category="struct"]'):
      if not filter_api(struct_type, api):
            name = struct_type.attrib['name']
   if name not in required_types:
            stype = struct_get_stype(struct_type)
   if stype is not None:
         for struct_type in xml.findall('.//enum[@alias][@extends=\'VkStructureType\']'):
      name = struct_type.attrib['name']
   alias = struct_type.attrib['alias']
         def main():
      parser = argparse.ArgumentParser()
   parser.add_argument('--xml', required=True,
                     parser.add_argument('--outdir',
                                          for filename in args.xml_files:
                     for template, file_ in [(H_TEMPLATE, os.path.join(args.outdir, 'vk_struct_type_cast.h'))]:
      with open(file_, 'w', encoding='utf-8') as f:
         f.write(template.render(
               if __name__ == '__main__':
      main()
