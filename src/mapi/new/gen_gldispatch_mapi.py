   #!/usr/bin/env python3
      # Copyright (C) 2010 LunarG Inc.
   # (C) Copyright 2015, NVIDIA CORPORATION.
   #
   # Permission is hereby granted, free of charge, to any person obtaining a
   # copy of this software and associated documentation files (the "Software"),
   # to deal in the Software without restriction, including without limitation
   # the rights to use, copy, modify, merge, publish, distribute, sublicense,
   # and/or sell copies of the Software, and to permit persons to whom the
   # Software is furnished to do so, subject to the following conditions:
   #
   # The above copyright notice and this permission notice shall be included
   # in all copies or substantial portions of the Software.
   #
   # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
   # THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   # FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   # DEALINGS IN THE SOFTWARE.
   #
   # Authors:
   #    Kyle Brenneman <kbrenneman@nvidia.com>
   #
   # Based on code ogiginally by:
   #    Chia-I Wu <olv@lunarg.com>
         """
   Generates the glapi_mapi_tmp.h header file from Khronos's XML file.
   """
      import sys
   import xml.etree.ElementTree as etree
      import genCommon
      def _main():
      target = sys.argv[1]
            roots = [ etree.parse(filename).getroot() for filename in xmlFiles ]
            names = genCommon.getExportNamesFromRoots(target, roots)
            if (target in ("gl", "gldispatch")):
      assert(len(functions) == len(allFunctions))
   assert(all(functions[i] == allFunctions[i] for i in range(len(functions))))
            /* This file is automatically generated by mapi_abi.py.  Do not modify. */
      #ifndef _GLAPI_TMP_H_
   #define _GLAPI_TMP_H_
   #endif /* _GLAPI_TMP_H_ */
   """.lstrip("\n"))
         print(generate_defines(functions))
   if target == "gldispatch":
      print(generate_table(functions, allFunctions))
   print(generate_noop_array(functions))
      print(generate_public_entries(functions))
   if target == "gldispatch":
         print(generate_undef_public_entries())
         def generate_defines(functions):
         #ifdef MAPI_TMP_DEFINES
   #include "util/glheader.h"
      """.lstrip("\n")
      for func in functions:
         text += "#undef MAPI_TMP_DEFINES\n"
   text += "#endif /* MAPI_TMP_DEFINES */\n"
         def generate_table(functions, allFunctions):
      text = "#ifdef MAPI_TMP_TABLE\n"
   text += "#define MAPI_TABLE_NUM_STATIC %d\n" % (len(allFunctions))
   text += "#define MAPI_TABLE_NUM_DYNAMIC %d\n" % (genCommon.MAPI_TABLE_NUM_DYNAMIC,)
   text += "#undef MAPI_TMP_TABLE\n"
   text += "#endif /* MAPI_TMP_TABLE */\n"
         def generate_noop_array(functions):
      text = "#ifdef MAPI_TMP_NOOP_ARRAY\n"
            for func in functions:
      text += "static {f.rt} GLAPIENTRY noop{f.basename}({f.decArgs})\n".format(f=func)
   text += "{\n"
   if (len(func.args) > 0):
         text += "  "
   for arg in func.args:
         text += "   noop_warn(\"{f.name}\");\n".format(f=func)
   if (func.hasReturn()):
               text += "const mapi_func table_noop_array[] = {\n"
   for func in functions:
         for i in range(genCommon.MAPI_TABLE_NUM_DYNAMIC - 1):
         text += "   (mapi_func) noop_generic\n"
   text += "};\n\n"
   text += "#else /* DEBUG */\n\n"
   text += "const mapi_func table_noop_array[] = {\n"
   for i in range(len(functions) + genCommon.MAPI_TABLE_NUM_DYNAMIC - 1):
                  text += "};\n\n"
   text += "#endif /* DEBUG */\n"
   text += "#undef MAPI_TMP_NOOP_ARRAY\n"
   text += "#endif /* MAPI_TMP_NOOP_ARRAY */\n"
         def generate_public_stubs(functions):
               text += "static const struct mapi_stub public_stubs[] = {\n"
   for func in functions:
         text += "};\n"
   text += "#undef MAPI_TMP_PUBLIC_STUBS\n"
   text += "#endif /* MAPI_TMP_PUBLIC_STUBS */\n"
         def generate_public_entries(functions):
               for func in functions:
      retStr = ("return " if func.hasReturn() else "")
   GLAPI {f.rt} GLAPIENTRY {f.name}({f.decArgs})
   {{
      const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[{f.slot}];
      }}
      """.lstrip("\n").format(f=func, retStr=retStr)
         text += "\n"
   text += "#endif /* MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN */\n"
         def generate_public_entries_table(functions):
      text = "#ifdef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN\n"
   text += "static const mapi_func public_entries[] = {\n"
   for func in functions:
         text += "};\n"
   text += "#endif /* MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN */\n"
         def generate_undef_public_entries():
      text = "#ifdef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN\n"
   text += "#undef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN\n"
   text += "#endif /* MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN */\n"
         def generate_stub_asm_gcc(functions):
      text = "#ifdef MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN\n"
            for func in functions:
      text += 'STUB_ASM_ENTRY("%s")"\\n"\n' % (func.name,)
         text += ");\n"
   text += "#undef MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN\n"
   text += "#endif /* MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN */\n"
         if (__name__ == "__main__"):
         